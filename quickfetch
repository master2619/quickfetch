import os
import platform
import psutil
import socket
import subprocess
from datetime import datetime
import distro
import cpuinfo
import GPUtil
from py3nvml import py3nvml as nvml

def get_os_info():
    if platform.system() == "Linux":
        dist_name = distro.name(pretty=True)
        return dist_name
    else:
        return f"{platform.system()} {platform.release()}"

def get_kernel_info():
    return platform.release()

def get_arch_info():
    return platform.machine()

def get_cpu_info():
    cpu = cpuinfo.get_cpu_info()
    cpu_name = cpu['brand_raw']
    cpu_cores = psutil.cpu_count(logical=True)
    return cpu_name, cpu_cores

def get_memory_info():
    mem = psutil.virtual_memory()
    return mem.total, mem.used

def get_uptime_info():
    boot_time_timestamp = psutil.boot_time()
    boot_time = datetime.fromtimestamp(boot_time_timestamp)
    now = datetime.now()
    uptime = now - boot_time
    return str(uptime).split('.')[0]  # Remove microseconds

def get_hostname_info():
    return socket.gethostname()

def get_user_info():
    return os.getlogin()

def get_gpu_info():
    gpus = GPUtil.getGPUs()
    gpu_list = []
    for gpu in gpus:
        gpu_list.append(gpu.name)
    if not gpu_list:
        # Check for integrated GPUs using lshw
        try:
            output = subprocess.check_output("lshw -C display", shell=True).decode()
            for line in output.split("\n"):
                if "product:" in line:
                    gpu_list.append(line.strip().split("product:")[1].strip())
        except:
            pass
    return ', '.join(gpu_list) if gpu_list else 'No GPU found'

def get_package_manager_info():
    package_managers = {
        "dpkg": "dpkg-query -f '.\n' -W | wc -l",
        "apt": "apt list --installed 2>/dev/null | wc -l",
        "rpm": "rpm -qa | wc -l",
        "pacman": "pacman -Q | wc -l",
        "dnf": "dnf list installed | wc -l",
        "snap": "snap list | wc -l",
        "flatpak": "flatpak list | wc -l"
    }
    installed_packages = {}
    for manager, command in package_managers.items():
        try:
            count = int(subprocess.check_output(command, shell=True).strip())
            if count > 0:
                installed_packages[manager] = count
        except:
            pass
    return installed_packages

def print_color_strip():
    colors = [
        "\033[91m", "\033[92m", "\033[93m", "\033[94m", "\033[95m", "\033[96m",
        "\033[97m", "\033[91m", "\033[92m", "\033[93m", "\033[94m", "\033[95m", "\033[96m", "\033[97m"
    ]
    strip = "".join([color + "â–ˆ" for color in colors])
    print(strip + "\033[0m")  # Reset color

def main():
    os_info = get_os_info()
    kernel = get_kernel_info()
    architecture = get_arch_info()
    cpu_name, cpu_cores = get_cpu_info()
    total_memory, used_memory = get_memory_info()
    uptime = get_uptime_info()
    hostname = get_hostname_info()
    user = get_user_info()
    gpu_info = get_gpu_info()
    package_manager_info = get_package_manager_info()
    
    print(f"User: {user}@{hostname}")
    print(f"OS: {os_info}")
    print(f"Kernel: {kernel}")
    print(f"Architecture: {architecture}")
    print(f"CPU: {cpu_name} ({cpu_cores} cores)")
    print(f"GPU: {gpu_info}")
    print(f"Memory: {used_memory / (1024 ** 3):.2f}GiB / {total_memory / (1024 ** 3):.2f}GiB")
    print(f"Uptime: {uptime}")
    
    for manager, count in package_manager_info.items():
        print(f"{manager.capitalize()}: {count} packages")
    
    print_color_strip()

if __name__ == "__main__":
    main()

